
// This is a JavaScript coding problem from BFE.dev 

/**
 * @param {(...args: any[]) => any} func
 * @param {number} wait
 * @returns {(...args: any[]) => any}
 */
function debounce(func, wait) {
  //to store instance and in closure each timer will be assigned to it
  let inDebounce;

  return function () {
    //reference the context and args for setTimeout function
    const context = this;
    const args = arguments;

//base case
//clear timeout to assign new timeout to it. 
    clearTimeout(inDebounce);
    //set new timeout and call original function with apply
    inDebounce = setTimeout(() => func.apply(context, args), wait);
  }

}


