import { useState, useEffect } from "react";
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const timerId = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Timeout is cancelled when:
    //  1. value or delay changes    
    //  2. component unmounts
    return () => clearTimeout(timerId);

  }, [value, delay])

  return debouncedValue;
}
